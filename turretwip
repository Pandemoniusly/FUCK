local KSP = loadstring(game:GetService("HttpService"):GetAsync("https://glot.io/snippets/gs2b7nwhij/raw/main.lua"))()
local Assets = LoadAssets(16168838598)
local Mod = Assets:Get("TurretBott")
Mod.TurretBot.CFrame = owner.Character.Head.CFrame * CFrame.new(0,0,-5)
Mod.TurretBot.Anchored = true
Mod.Parent = script
local p = Instance.new("Part")
local tweenService = game:GetService("TweenService")
function tweenwait(time)
local timer = tweenService:Create(p, TweenInfo.new(time), {CFrame = CFrame.new()})
timer:Play()
timer.Completed:Wait()
return
end
function findhum(who)
if who:FindFirstAncestorWhichIsA("Model") then
if who:FindFirstAncestorWhichIsA("Model"):FindFirstChildWhichIsA("Humanoid") then
return true,who:FindFirstAncestorWhichIsA("Model"),who:FindFirstAncestorWhichIsA("Model"):FindFirstChildWhichIsA("Humanoid")
else
return false
end
else
return false
end
end
local kickhit = Instance.new("Sound")
kickhit.SoundId = "rbxassetid://16228783520"
local kicks = {kickhit}
function soundreuse(which,who)
pcall(function()
if which == "kick" then
local parented = false
for i,v in pairs(kicks) do
if v ~= nil and parented == false then
if i == #kicks and v.Playing == true then
parented = true
local k = v:Clone()
k:Stop()
table.insert(kicks,k)
k.Parent = who
k.Pitch = 0.8 + Random.new():NextInteger(-0.0125,0.0125)
k:Play()
coroutine.wrap(function()
if not k.IsLoaded == true then
repeat
task.wait()
until k.IsLoaded == true
end
tweenwait(k.TimeLength)
if k~= nil then
k.Parent = nil
end
end)()
elseif v.Playing == false then
parented = true
v.Parent = who
v.Pitch = 0.8 + Random.new():NextInteger(-0.0125,0.0125)
v:Play()
coroutine.wrap(function()
tweenwait(v.TimeLength)
if v~= nil then
v.Parent = nil
end
end)()
end
else 
table.remove(kicks,v)
end
end
elseif which ~= "kick" then
end
end)
end
-- [[ SETUP ]] --

-- // tables and variables

local AnimationHandler = {}
AnimationHandler.__index = AnimationHandler

AnimationHandler._Rigs = {}
AnimationHandler._Animations = {}

do
    function AnimationHandler:ToggleWelds(rig, legs, en, bl)
        bl = bl or {}
        rig = rig or owner.Character

        if AnimationHandler._Animations[rig] == nil then
            AnimationHandler:_SetupRig(rig, false)
        end

        for _, v in pairs(rig:GetDescendants()) do
            if (v:IsA("Motor6D") or v:IsA("Motor"))  and v:FindFirstChild("AnimationWeld") then
                if legs == true and not string.find(v.Name, "Hip") and not table.find(bl, v.Name) then
                    v.AnimationWeld.Enabled = en
                elseif legs == false and not table.find(bl, v.Name) then
                    v.AnimationWeld.Enabled = en
                end
            end
        end
    end

    function AnimationHandler:GetAnimationLength(anim)
        local lkf = 0

        for i, _ in pairs(anim.Keyframes) do
            if i > lkf then
                lkf = i
            end
        end

        return lkf
    end

    function AnimationHandler:Stop(args)
        local rig = args.Rig or owner.Character
        local c0sap = AnimationHandler._Rigs[rig]
        local atds = AnimationHandler._Animations

        local parts = c0sap.Parts
        local oldc0s = c0sap.OldC0s

        local anim = args.Animation
        local ft = args.FadeTime or .5
        local dw = args.DisableWelds or false

        local old = atds[rig][anim]

        local function check()
            local lp = 0
            local which = nil

            atds[rig][anim] = nil

            for i, v in pairs(atds[rig]) do
                if v.Priority > lp then
                    lp = v.Priority
                    which = v
                end
            end

            atds[rig][anim] = old

            return which
        end

        if atds[rig][anim] ~= nil then
            for _, thread in pairs(atds[rig][anim]) do
                if type(thread) == "thread" then
                    task.cancel(thread)
                end
            end

            for _, tween in pairs(atds[rig][anim]["Tweens"]) do
                tween:Cancel()
            end
        end

        task.wait()

        -- // atds[rig][anim] = nil
        
        local getn = -1

        for _, v in pairs(atds[rig]) do
            getn += 1
        end

        local which = check()

        if which ~= atds[rig][anim] and which ~= nil then
            local args = {
                ["Time"] = ft,
                ["Rig"] = rig,
                ["Override"] = true,
                ["Tweening"] = true,
                ["EasingStyle"] = "Linear",
                ["AnimationTable"] = which,
                ["Poses"] = which.Animation.Keyframes[which.CurrentTime]
            }

            coroutine.wrap(function()
                local t = args.Time
                local tbl = args.Poses
                local atbl = args.AnimationTable
                local tween = args.Tweening or true
                local es = args.EasingStyle or "Linear"
                local rig = args.Rig or owner.Character
                local which = args.HighestPriority or atbl

                local ius = atbl["InUse"]
                local tweens = atbl["Tweens"]

                for i, _ in pairs(AnimationHandler._Rigs[rig].Parts) do
                    ius[i] = false
                end
                
                local function recurse(v)
                    if type(v) == "table" then
                        for i, v in pairs(v) do
                            ius[i] = false
                            
                            local part = AnimationHandler._Rigs[rig].Parts[i]
                            local oldc0 = AnimationHandler._Rigs[rig].OldC0s[i]

                            if part then
                               ius[i] = true
                                
                                if tween == true then
                                    pcall(function()
                                        local tw = game:GetService("TweenService"):Create(part, TweenInfo.new(ft, Enum.EasingStyle.Linear), {CFrame = oldc0 * v.CFrame}):Play()
                                    end)
                                else
                                    pcall(function()
                                        part.C0 = oldc0 * v.CFrame
                                    end)
                                end  
                            end

                            recurse(v)
                        end
                    end
                end

                recurse(tbl)
            end)()
        end

        for i, v in pairs(parts) do
            if which == atds[rig][anim] or which == nil then
                game:GetService("TweenService"):Create(v, TweenInfo.new(ft), {CFrame = oldc0s[i]}):Play()
            end

            task.delay(ft, function()
                if args.DisableWelds == true and getn == 0 then
                    v.Enabled = false
                end
            end)
        end

        task.delay(ft, function()
            atds[rig][anim] = nil
        end)
    end

    function AnimationHandler:_SetupRig(rig, en)
        local parts = {}
        local oldc0s = {}
        
        local animated = AnimationHandler._Rigs

        if animated[rig] ~= nil then
            return
        end

        for _, v in pairs(rig:GetDescendants()) do
            if (v:IsA("Motor6D") or v:IsA("Motor")) and not v:FindFirstChild("AnimationWeld") then
                local w = Instance.new("Weld", v)
                w.Name = "AnimationWeld"
                w.Part0 = v.Part0
                w.Part1 = v.Part1
                w.C0 = v.C0
                w.C1 = v.C1
                w.Enabled = en or true
            end
        end

        for _, v in pairs(rig:GetDescendants()) do
            if (v:IsA("Motor6D") or v:IsA("Motor")) then
                oldc0s[v.Part1.Name] = v.C0
                parts[v.Part1.Name] = v.AnimationWeld
elseif v:IsA("Bone") then
                oldc0s[v.Name] = v.CFrame
                parts[v.Name] = v
            end
        end

        animated[rig] = {
            ["Parts"] = parts,
            ["OldC0s"] = oldc0s
        }

        return animated[rig]
    end

    function AnimationHandler:_Recurse(args)
        local t = args.Time
        local tbl = args.Poses
        local atbl = args.AnimationTable
        local tween = args.Tweening or true
        local es = args.EasingStyle or "Cubic"
        local rig = args.Rig or owner.Character
        local which = args.HighestPriority or atbl

        local ius = atbl["InUse"]
        local tweens = atbl["Tweens"]

        for i, _ in pairs(AnimationHandler._Rigs[rig].Parts) do
            ius[i] = false
        end
        
        local function recurse(v)
            if type(v) == "table" then
                for i, v in pairs(v) do
                    if typeof(v) == "string" and v ~= "CFrame" then
                        if args.Events[i] ~= nil then
                            for _, event in pairs(args.Events[i]) do
                                event:Fire(v)
                            end
                        end
                    else
                        ius[i] = false

                        local part = AnimationHandler._Rigs[rig].Parts[i]
                        local oldc0 = AnimationHandler._Rigs[rig].OldC0s[i]

                        if part then
                            if args.Override == true then
                                ius[i] = true
                                
                                if tween == true then
                                    pcall(function()
                                        local tw = game:GetService("TweenService"):Create(part, TweenInfo.new(t, es), {CFrame = oldc0 * v.CFrame})
                                        tw:Play()

                                        table.insert(tweens, tw)
                                    end)
                                else
                                    pcall(function()
                                        part.C0 = oldc0 * v.CFrame
                                    end)
                                end  
                            end

                            if args.Override ~= true and which == atbl and which["InUse"][i] ~= true then
                                ius[i] = true
                                
                                if tween == true then
                                    pcall(function()
                                        local tw = game:GetService("TweenService"):Create(part, TweenInfo.new(t, es), {CFrame = oldc0 * v.CFrame})
                                        tw:Play()

                                        table.insert(tweens, tw)
                                    end)
                                else
                                    pcall(function()
                                        part.C0 = oldc0 * v.CFrame
                                    end)
                                end
                            end
                        end

                        recurse(v)
                    end
                end
            end
        end

        recurse(tbl)
    end

    function AnimationHandler:Animate(args)
        local anim
        local c0sap
        local lt = 0
        local lkf = 0
        local tbl = args.Animation
        local looping = args.Looping
        local speed = args.Speed or 1
        local prior = args.Priority or 2
        local tween = args.Tweening or true
        local es = args.EasingStyle or "Linear"
        local rig = args.Rig or owner.Character
        local animated = AnimationHandler._Rigs
        local atds = AnimationHandler._Animations

        if animated[rig] == nil then
            c0sap = AnimationHandler:_SetupRig(rig, args.DisableOnSetup)
        else
            c0sap = animated[rig]
        end

        local parts = c0sap.Parts
        local oldc0s = c0sap.OldC0s

        if type(es) == "string" then
            es = Enum.EasingStyle[es]
        end

        if type(tbl) == "string" then -- // check if the argument is a string or url, then decode it and get table
            anim = loadstring(game:GetService("HttpService"):GetAsync(tbl))()
        elseif type(tbl) ~= "string" then -- // check if the argument is a table, then set anim to tbl
            anim = tbl
        end

        if atds[rig] == nil then
            atds[rig] = {}
        end

        local function reset()
            atds[rig][anim] = {}

            local atbl = atds[rig][anim]

            atbl["InUse"] = {}
            atbl["Tweens"] = {}
            atbl["Speed"] = speed
            atbl["Paused"] = false
            atbl["CurrentTime"] = 0
            atbl["Priority"] = prior
            atbl["Animation"] = anim
        end
        
        reset()

        for i, _ in pairs(anim.Keyframes) do
            if i > lkf then
                lkf = i
            end
        end

        -- // print(lkf, "lkf")

        local function check()
            local lp = 0
            local which = nil
            
            for i, v in pairs(atds[rig]) do
                if v.Priority > lp then
                    lp = v.Priority
                    which = v
                end
            end

            return which
        end

        local be = Instance.new("BindableEvent", game:GetService("ServerScriptService"))

        local AnimationTrack = {}
        AnimationTrack.__index = AnimationTrack
        
        AnimationTrack.Rig = rig
        AnimationTrack.Events = {}
        AnimationTrack.Animation = anim
        AnimationTrack.Stopped = be.Event
        AnimationTrack.AnimationTable = atds[rig][anim]
        AnimationTrack.Length = AnimationHandler:GetAnimationLength(anim)

        function AnimationTrack:CleanEvents()
            AnimationTrack.Events = {}

            return AnimationTrack.Events
        end

        function AnimationTrack:GetMarkerReachedSignal(n)
            local event = Instance.new("BindableEvent", game:GetService("ServerScriptService"))
            
            if AnimationTrack.Events[n] == nil then
                AnimationTrack.Events[n] = {}
            end

            table.insert(AnimationTrack.Events[n], event)

            return event.Event
        end

        local function animate()
            for i, v in pairs(anim.Keyframes) do
                local t = i / speed

                if args.Reverse == true then
                    t = lkf - (i / speed)
                end
                
                table.insert(atds[rig][anim], task.delay(t, function()
                    if atds[rig][anim] == nil then
                        reset()
                    end

                    atds[rig][anim]["CurrentTime"] = t
                    
                    local which = check()
                    local t = (i - lt) / speed

                    AnimationHandler:_Recurse({
                        ["Time"] = t,
                        ["Poses"] = v,
                        ["Tweening"] = tween,
                        ["EasingStyle"] = es,
                        ["HighestPriority"] = which,
                        ["Rig"] = rig or owner.Character,
                        ["Events"] = AnimationTrack.Events,
                        ["AnimationTable"] = atds[rig][anim]
                    })

                    lt = i
                end))    
            end

            local getn = 0

            for _, v in pairs(anim.Keyframes) do
                getn += 1
            end

            if looping == true and atds[rig][anim] ~= nil and getn > 1 then
                table.insert(atds[rig][anim], task.delay(lkf / speed, animate))
            end

            if (looping == false or looping == nil) and getn > 1 then
                task.wait(lkf / speed)
                
                if args.StallTime then
                    task.wait(args.StallTime)
                end

                be:Fire()

                AnimationHandler:Stop({
                    ["Rig"] = rig,
                    ["Animation"] = anim,
                    ["DisableWelds"] = args.DisableWelds or false
                })
            end
        end
        
        if args.Wrapped == true then
            coroutine.wrap(animate)()
        else
            animate()
        end

        return AnimationTrack
    end
end
local blue = "http://www.roblox.com/asset/?id=16189078659"
local pink = "http://www.roblox.com/asset/?id=16189076908"
local orange = "http://www.roblox.com/asset/?id=16189074646"
local dead = "http://www.roblox.com/asset/?id=16155234792"
--AnimationHandler:Animate({["Animation"] = ,["Looping"] = ,["Speed"] = ,["Priority"] = ,["Rig"] = })
local h = loadstring(game:GetService("HttpService"):GetAsync("https://raw.githubusercontent.com/Pandemoniusly/FUCK/main/kick.lua"))()
--AnimationHandler:Animate({["Animation"] = h,["Looping"] = true,["Speed"] = 0.3,["Priority"] = 1,["Rig"] = Mod})
local antenna = Mod.TurretBot.Armature.Root.Pelvis.Spine_01.Spine_02.Torso.Neck.Head_Main.Antena_01.Antena_02.Antena_03.Antena_04
local Beam1 = Mod.TurretBot.Beam
local Beam2 = Mod.TurretBot.Beam2
Beam1.Enabled = false
Beam2.Enabled = false
local num1 = Instance.new("NumberValue",script)
local num2 = Instance.new("NumberValue",script)
num1.Changed:Connect(function(val)
Beam1.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, val),NumberSequenceKeypoint.new(1, 1)})
Beam2.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, val),NumberSequenceKeypoint.new(1, num2.Value)})
end)
num2.Changed:Connect(function(val)
Beam2.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, num1.Value),NumberSequenceKeypoint.new(1, val)})
end)
local swing = Instance.new("Sound")
swing.PlayOnRemove = true
swing.Pitch = 2
swing.SoundId = "rbxassetid://16213882847"
local flash = Instance.new("Sound")
flash.PlayOnRemove = true
flash.SoundId = "rbxassetid://16215438333"
local kicking = false
local kicked = {}
local col = ""
function kick()
local torcf = Mod.TurretBot.Armature.Root.Pelvis.Spine_01.Spine_02.Torso.WorldCFrame
local holder = Instance.new("Part")
holder.Size = Vector3.new(0.01,1.8,1.8)
holder.Transparency = 1
holder.CanCollide = false
holder.CanQuery = false
holder.CFrame = (torcf * CFrame.new(0.85,0,0)) * CFrame.Angles(math.rad(math.random(60,120)),0,0)
holder.Anchored = true
local screen = Instance.new("SurfaceGui", holder)
screen.Face = Enum.NormalId.Right
local frame = Instance.new("ImageLabel", screen) 
frame.BackgroundTransparency = 1 
frame.ImageTransparency = 0.4
frame.Image = "http://www.roblox.com/asset/?id=16211007963" 
frame.Size = UDim2.new(1,0,1,0) 
frame.ResampleMode = "Pixelated"
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
holder.Parent = script
flash.Parent = Mod.TurretBot
flash.Parent = nil
game:GetService("Debris"):AddItem(holder,0.6)
local g = {}
g.Size = UDim2.new(0,0,0,0) 
local g2 = {}
g2.Brightness = 0.3
local del = tweenService:Create(frame, TweenInfo.new(0.5,Enum.EasingStyle.Sine,Enum.EasingDirection.Out), g)
local del2 = tweenService:Create(screen, TweenInfo.new(0.1,Enum.EasingStyle.Sine,Enum.EasingDirection.Out), g2)
Mod.TurretBot.TextureID = blue
AnimationHandler:Animate({["Animation"] = h,["Looping"] = false,["Speed"] = 1,["Priority"] = 1,["Rig"] = Mod,["Wrapped"] = true})
tweenwait(0.05)
screen.LightInfluence = 0
del2:Play()
tweenwait(0.05)
del:Play()
tweenwait(0.5)
kicking = true
swing.Parent = Mod.TurretBot
swing.Parent = nil
Beam1.Enabled = true
Beam2.Enabled = true
local g = {}
g.Value = 0.7
local b1 = tweenService:Create(num1, TweenInfo.new(0.05,Enum.EasingStyle.Sine,Enum.EasingDirection.Out), g)
local b2 = tweenService:Create(num2, TweenInfo.new(0.05,Enum.EasingStyle.Sine,Enum.EasingDirection.Out), g)
b1:Play()
b1.Completed:Wait()
b2:Play()
b2.Completed:Wait()
Mod.TurretBot.TextureID = pink
local g = {}
g.Value = 1
local b1 = tweenService:Create(num1, TweenInfo.new(0.05,Enum.EasingStyle.Sine,Enum.EasingDirection.Out), g)
local b2 = tweenService:Create(num2, TweenInfo.new(0.05,Enum.EasingStyle.Sine,Enum.EasingDirection.Out), g)
b1:Play()
b1.Completed:Wait()
b2:Play()
b2.Completed:Wait()
Beam1.Enabled = false
Beam2.Enabled = false
kicking = false
kicked = {}
end
game:GetService("RunService").Stepped:Connect(function()
if kicking == true then
local params = OverlapParams.new()
params.FilterDescendantsInstances = {kicked}
params.FilterType = Enum.RaycastFilterType.Blacklist
for _, v in pairs(workspace:GetPartBoundsInBox((Mod.TurretBot.CFrame*CFrame.new(0,-0.5,-1.5)),Vector3.new(7,7.5,5), params)) do
local found,char,hum = findhum(v)
  if found == true and hum.Health ~= 0 and not table.find(kicked,char) then
    table.insert(kicked,char)
    hum.Health -= 40
coroutine.wrap(function()
pcall(function()
soundreuse("kick",char.HumanoidRootPart)
end)
end)()
    end
  end
end
end
end)
while wait(3) do
kick()
end
